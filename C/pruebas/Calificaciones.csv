Identificador,Nombre completo,Estado,Calificación,Calificación máxima,La calificación puede ser cambiada,Visualización/<br>entrega,Última modificación (calificación),Comentarios de retroalimentación del profesor
Participante_19140,Senador Rebeca,Sin&nbsp;entrega,"0,0","10,00",Sí,-,-,"<p>compila correctamente<br></p>
<p>Calificaci&oacute;n final: 4.75/10<br></p>
<table border=""1"">
<tbody>
<tr>
<th>M&eacute;todo</th>
<th>Puntuaci&oacute;n</th>
<th>Retroalimentaci&oacute;n</th>
</tr>
<tr>
<td>poly_crear</td>
<td>0.5 / 1</td>
<td>
<p><strong>Funcionalidad:</strong> Se reserva memoria correctamente pero nunca asigna la direcci&oacute;n reci&eacute;n reservada a <code>*p</code>, por lo que el polinomio creado no queda accesible.&nbsp;</p>
<p><em>Sugerencia Formativa:</em> Siempre usa el depurador para revisaar que se asignan corrctramente.</p>
</td>
</tr>
<tr>
<td>poly_grado</td>
<td>0.5 / 1</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n intenta devolver el exponente del &uacute;ltimo monomio, pero no verifica si el propio puntero <code>p</code> es NULL y asume que <code>p-&gt;ultimo</code> representa siempre el t&eacute;rmino de mayor exponente. <br> <strong>Mantenimiento:</strong> Podr&iacute;a beneficiarse de una funci&oacute;n auxiliar para comprobar la validez del polinomio, lo que evitar&iacute;a duplicar la verificaci&oacute;n en otros m&eacute;todos. <br> <strong>Claridad:</strong> El c&oacute;digo es sencillo, aunque el nombre de la variable &ldquo;mon&rdquo; es gen&eacute;rico. <br> <strong>Eficiencia:</strong> Se recurre a un acceso directo a <code>p-&gt;ultimo</code> sin iterar, lo que es adecuado si se mantiene la estructura de lista ordenada. <br> <em>Sugerencia Formativa:</em> Considera incluir una comprobaci&oacute;n <code>if(p == NULL)</code> para aumentar la robustez.</td>
</tr>
<tr>
<td>poly_coeficiente</td>
<td>0.5 / 1</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n recorre la lista de monomios pero, en lugar de devolver el coeficiente del monomio coincidiente, devuelve el exponente, lo que no cumple el enunciado. <br> <strong>Mantenimiento:</strong> La l&oacute;gica de recorrido es repetitiva y podr&iacute;a centralizarse en una funci&oacute;n auxiliar para la b&uacute;squeda. <br> <strong>Claridad:</strong> Los nombres de las variables son poco descriptivos y se confunde el uso de <code>exp</code> al comparar exponentes pero asignar valores err&oacute;neos. <br> <strong>Eficiencia:</strong> Se recorre la lista de forma innecesaria en dos bloques (dentro del while y despu&eacute;s del while). <br> <em>Sugerencia Formativa:</em> Revise la l&oacute;gica de comparaci&oacute;n y aseg&uacute;rese de devolver <code>mon-&gt;coeficiente</code> en lugar de <code>mon-&gt;exponente</code>.</td>
</tr>
<tr>
<td>poly_agregar</td>
<td>1.0 / 2.5</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n intenta insertar o actualizar un monomio, pero se utilizan operaciones que asignan enteros a punteros y la l&oacute;gica para sumar coeficientes o eliminar un nodo es inconsistente. <br> <strong>Mantenimiento:</strong> La funci&oacute;n es larga y carece de subrutinas o funciones auxiliares para separar los casos (inserci&oacute;n al inicio, medio y fin), lo que dificulta la correcci&oacute;n y mejora del c&oacute;digo. <br> <strong>Claridad:</strong> Las condiciones anidadas y la reutilizaci&oacute;n inadecuada de variables (por ejemplo, asignar un resultado entero a una variable que originalmente es un puntero) hacen que el c&oacute;digo sea dif&iacute;cil de seguir. <br> <strong>Eficiencia:</strong> Podr&iacute;a optimizarse evitando m&uacute;ltiples recorridos cuando se pueden integrar en una sola iteraci&oacute;n. <br> <em>Sugerencia Formativa:</em> Descomp&oacute;n la funci&oacute;n en partes m&aacute;s peque&ntilde;as para manejar cada caso de inserci&oacute;n, suma y eliminaci&oacute;n, y revisa la conversi&oacute;n de tipos para evitar asignaciones de enteros a punteros.</td>
</tr>
<tr>
<td>poly_imprimir</td>
<td>0.5 / 1.25</td>
<td><strong>Funcionalidad:</strong> Se intenta imprimir el polinomio, pero se emplea la funci&oacute;n <code>prinf</code> en lugar de <code>printf</code> y se usan nombres de campos (<code>sig</code>, <code>coef</code> y <code>exp</code>) que no corresponden con la estructura definida. <br> <strong>Mantenimiento:</strong> La dependencia en nombres de campo inconsistentes dificulta la integraci&oacute;n con el resto del c&oacute;digo. <br> <strong>Claridad:</strong> Los errores tipogr&aacute;ficos y el uso de variables mal nombradas reducen la legibilidad. <br> <strong>Eficiencia:</strong> La l&oacute;gica de recorrido es simple, pero se ve opacada por errores sint&aacute;cticos. <br> <em>Sugerencia Formativa:</em> Corrige el error tipogr&aacute;fico a <code>printf</code> y aseg&uacute;rate de utilizar los nombres de campo correctos definidos en la estructura.</td>
</tr>
<tr>
<td>poly_destruir</td>
<td>0.75 / 1.25</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n intenta liberar la memoria de cada monomio pero el recorrido de la lista es defectuoso; por ejemplo, se parte de <code>p-&gt;primero-&gt;sig</code> y se liberan nodos de forma que puede quedar memoria sin liberar correctamente. <br> <strong>Mantenimiento:</strong> La utilizaci&oacute;n de variables con nombres gen&eacute;ricos como <code>mon</code> y <code>aux</code> dificulta el seguimiento del proceso de liberaci&oacute;n. <br> <strong>Claridad:</strong> La l&oacute;gica para avanzar en la lista y liberar cada nodo no es clara ni robusta ante listas con pocos nodos. <br> <strong>Eficiencia:</strong> Se realizan llamadas a <code>free</code> de forma que puede ocasionar dobles liberaciones o accesos incorrectos. <br> <em>Sugerencia Formativa:</em> Recorre la lista desde el primer nodo, guarda el siguiente en una variable temporal y libera el nodo actual en cada iteraci&oacute;n, finalizando poniendo <code>p-&gt;primero</code> y <code>p-&gt;ultimo</code> a NULL.</td>
</tr>
<tr>
<td>poly_sumar</td>
<td>1.0 / 2</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n apenas comprueba una condici&oacute;n muy limitada (comparando coeficientes del primer nodo) y no implementa la l&oacute;gica necesaria para recorrer ambos polinomios y sumar los monomios con iguales exponentes. <br> <strong>Mantenimiento:</strong> La ausencia de una implementaci&oacute;n completa y el hecho de retornar un polinomio &ldquo;vac&iacute;o&rdquo; sin suma efectiva dificulta la reutilizaci&oacute;n y extensi&oacute;n del c&oacute;digo en el futuro. <br> <strong>Claridad:</strong> La estructura de la funci&oacute;n es m&iacute;nima y deja incomprendida la intenci&oacute;n de la suma, lo que obliga a partir de cero para su correcci&oacute;n. <br> <strong>Eficiencia:</strong> Se evita un recorrido doble al no implementar la fusi&oacute;n de listas ordenadas, pero la limitaci&oacute;n funcional impide aprovechar este beneficio. <br> <em>Sugerencia Formativa:</em> Implementa un recorrido paralelo de ambas listas de monomios que sume coeficientes cuando los exponentes coincidan y copie los monomios restantes, manejando adecuadamente casos nulos.</td>
</tr>
</tbody>
</table>"
Participante_19137,Zacarías Rusty,Sin&nbsp;entrega,,"10,00",Sí,-,-,"<p>compila correctamente<br></p>
<p>Calificaci&oacute;n final: 7/10<br></p>
<table border=""1"">
<tbody>
<tr>
<th>M&eacute;todo</th>
<th>Puntuaci&oacute;n</th>
<th>Retroalimentaci&oacute;n</th>
</tr>
<tr>
<td>poly_crear</td>
<td>0.5 / 1</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n reserva memoria y asigna los punteros <code>primero</code> y <code>ultimo</code> a NULL, pero no cumple la especificaci&oacute;n al finalizar con <code>exit(1)</code> en lugar de <code>exit(-1)</code> en caso de error. <br> <strong>Mantenimiento:</strong> El c&oacute;digo es breve y f&aacute;cil de seguir, aunque se podr&iacute;a mejorar la nomenclatura del par&aacute;metro (por ejemplo, usar <code>polinomio</code> en lugar de <code>p</code>).<br> <strong>Claridad:</strong> Resulta comprensible, pero el mensaje de error podr&iacute;a ser m&aacute;s claro y acorde a la especificaci&oacute;n.<br> <strong>Eficiencia:</strong> Adecuada para la tarea requerida.<br> <em>Sugerencia Formativa:</em> Aseg&uacute;rate de utilizar el c&oacute;digo de salida correcto (-1) cuando se falle la reserva de memoria.</td>
</tr>
<tr>
<td>poly_grado</td>
<td>1 / 1</td>
<td><strong>Funcionalidad:</strong> Calcula el grado del polinomio en O(1) aprovechando el puntero <code>ultimo</code> siempre que el polinomio contenga elementos, y devuelve -1 en caso de fallo. <br> <strong>Mantenimiento:</strong> El c&oacute;digo es conciso y f&aacute;cilmente modificable.<br> <strong>Claridad:</strong> El nombre de las variables es descriptivo y el flujo l&oacute;gico es claro.<br> <strong>Eficiencia:</strong> Excelente, ya que evita recorrer toda la lista.</td>
</tr>
<tr>
<td>poly_coeficiente</td>
<td>1 / 1</td>
<td><strong>Funcionalidad:</strong> Recorre la lista de monomios y devuelve el coeficiente correspondiente al exponente solicitado o 0 si no existe, gestionando correctamente el caso de exponentes negativos. <br> <strong>Mantenimiento:</strong> Aunque el c&oacute;digo funciona correctamente, podr&iacute;a beneficiarse de una funci&oacute;n auxiliar para la b&uacute;squeda, reduciendo la duplicaci&oacute;n en otros m&eacute;todos. <br> <strong>Claridad:</strong> Las variables y condiciones son adecuadas y f&aacute;ciles de entender. <br> <strong>Eficiencia:</strong> Utiliza el ordenamiento de la lista para limitar la b&uacute;squeda, lo cual es apropiado.</td>
</tr>
<tr>
<td>poly_agregar</td>
<td>1.0 / 2.5</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n intenta insertar un monomio y, si existe, sumar sus coeficientes; sin embargo, presenta un fallo cr&iacute;tico al no inicializar correctamente la variable <code>previo</code> cuando el monomio coincidente se encuentra en la primera posici&oacute;n. Esto puede producir comportamientos indefinidos. <br> <strong>Mantenimiento:</strong> La l&oacute;gica emplea punteros a punteros y carece de descomposici&oacute;n en funciones auxiliares para la inserci&oacute;n en distintos casos (inicio, medio o final), lo que dificulta su mantenimiento. <br> <strong>Claridad:</strong> La lectura del c&oacute;digo es compleja debido a la gesti&oacute;n de punteros; se recomienda documentar y renombrar variables (por ejemplo, usar <code>anterior</code> en lugar de <code>previo</code>). <br> <strong>Eficiencia:</strong> El recorrido es correcto, pero la gesti&oacute;n de casos borde reduce la robustez de la funci&oacute;n. <br> <em>Sugerencia Formativa:</em> Inicializa adecuadamente la variable que guarda el nodo anterior y considera dividir la funci&oacute;n en subrutinas para cada caso de inserci&oacute;n.</td>
</tr>
<tr>
<td>poly_imprimir</td>
<td>1.25 / 1.25</td>
<td><strong>Funcionalidad:</strong> Imprime correctamente los monomios del polinomio siguiendo el formato especificado y muestra un mensaje alternativo cuando el polinomio es nulo.<br> <strong>Mantenimiento:</strong> La utilizaci&oacute;n de la funci&oacute;n auxiliar <code>imprimirMonomio</code> facilita su mantenimiento. <br> <strong>Claridad:</strong> El c&oacute;digo es claro y directo, con nombres de variables adecuados. <br> <strong>Eficiencia:</strong> Recorre la lista de forma &oacute;ptima.</td>
</tr>
<tr>
<td>poly_destruir</td>
<td>1.25 / 1.25</td>
<td><strong>Funcionalidad:</strong> Libera correctamente la memoria de cada monomio y reinicializa los punteros <code>primero</code> y <code>ultimo</code> a NULL, evitando fugas de memoria. <br> <strong>Mantenimiento:</strong> El c&oacute;digo es sencillo y modular. <br> <strong>Claridad:</strong> La nomenclatura es descriptiva y facilita la comprensi&oacute;n del proceso de liberaci&oacute;n de memoria. <br> <strong>Eficiencia:</strong> La iteraci&oacute;n sobre la lista se realiza de manera adecuada.</td>
</tr>
<tr>
<td>poly_sumar</td>
<td>1.0 / 2</td>
<td><strong>Funcionalidad:</strong> La funci&oacute;n suma los dos polinomios mediante la inserci&oacute;n de todos los monomios de cada uno en un nuevo polinomio. No obstante, depende de <code>poly_agregar</code>, lo que genera problemas en los casos en que existan monomios con el mismo exponente, especialmente en la cabeza de la lista. Adem&aacute;s, no se hace una validaci&oacute;n exhaustiva de las entradas nulas. <br> <strong>Mantenimiento:</strong> Podr&iacute;a optimizarse realizando un recorrido simult&aacute;neo de ambas listas, reduciendo la duplicidad en la suma de t&eacute;rminos comunes. <br> <strong>Claridad:</strong> Aunque se entiende la intenci&oacute;n, se recomienda un uso m&aacute;s descriptivo de las variables en los bucles. <br> <strong>Eficiencia:</strong> El m&eacute;todo recorre cada lista por separado; una fusi&oacute;n simult&aacute;nea podr&iacute;a mejorar la eficiencia en el manejo de polinomios grandes. <br> <em>Sugerencia Formativa:</em> Corrige la dependencia del m&eacute;todo defectuoso y considera un algoritmo que combine ambas listas de forma paralela para evitar recorridos redundantes.</td>
</tr>
</tbody>
</table>"
Participante_19139,Estéban Amber,Sin&nbsp;entrega,,"10,00",Sí,-,-,
Participante_19138,Kappa Miguel,Sin&nbsp;entrega,,"10,00",Sí,-,-,
