./pruebas//Senador Rebeca_assignsubmission_file_/:compila correctamente<br>
<html>
<body>
Calificación final: 5.75/10<br>
<table border="1">
  <tr>
    <th>Método</th>
    <th>Puntuación</th>
    <th>Retroalimentación</th>
  </tr>
  <tr>
    <td>poly_crear</td>
    <td>0.5 / 1</td>
    <td>
      <strong>Funcionalidad:</strong> La función reserva memoria y establece los campos a NULL, pero no asigna la dirección del nuevo objeto a <code>*p</code>, por lo que el polinomio no queda efectivamente inicializado. <br>
      <strong>Mantenimiento:</strong> Se utiliza una variable denominada <code>new</code> sin asignarla al puntero de salida; esto puede llevar a duplicación de lógica al tener que corregir la asignación en futuros mantenimientos. <br>
      <strong>Claridad:</strong> El código resulta entendible en la verificación de errores, pero la omisión de la asignación a <code>*p</code> reduce la legibilidad y comprensión. <br>
      <strong>Eficiencia:</strong> La reserva de memoria es directa y sin complejidades, pero el fallo funcional impacta el uso futuro de la función. <br>
      <em>Sugerencia:</em> Asegúrate de asignar el resultado de <code>malloc</code> a <code>*p</code> para que la estructura creada esté disponible para el resto del programa.
    </td>
  </tr>
  <tr>
    <td>poly_grado</td>
    <td>0.5 / 1</td>
    <td>
      <strong>Funcionalidad:</strong> La función devuelve el valor del campo <code>exponente</code> del nodo <code>ultimo</code>, pero no verifica si el puntero <code>p</code> es NULL, lo que puede ocasionar errores si se invoca incorrectamente. <br>
      <strong>Mantenimiento:</strong> El código es corto y directo, pero se recomienda centralizar las validaciones de punteros para mejorar la robustez del sistema. <br>
      <strong>Claridad:</strong> La variable usada (<code>res</code>) es poco descriptiva; usar nombres como <code>grado</code> ayudaría a la lectura. <br>
      <strong>Eficiencia:</strong> El uso de <code>p->ultimo</code> permite obtener el grado en tiempo constante (O(1)). <br>
      <em>Sugerencia:</em> Añade validación del puntero de entrada y utiliza nombres de variables más descriptivos.
    </td>
  </tr>
  <tr>
    <td>poly_coeficiente</td>
    <td>0.5 / 1</td>
    <td>
      <strong>Funcionalidad:</strong> La función recorre la lista de monomios en busca del exponente solicitado, pero asigna el valor del exponente en lugar del coeficiente. Además, no se gestionan adecuadamente casos de exponentes negativos o inexistentes. <br>
      <strong>Mantenimiento:</strong> La ausencia de una función auxiliar para la búsqueda del monomio hace el código menos reutilizable. <br>
      <strong>Claridad:</strong> La asignación incorrecta y nombres confusos (por ejemplo, usando <code>mon</code> sin claridad sobre lo que se espera devolver) dificultan el entendimiento. <br>
      <strong>Eficiencia:</strong> La iteración lineal es adecuada, pero los errores funcionales anulan su correcto desempeño. <br>
      <em>Sugerencia:</em> Revisa que el valor retornado corresponda al coeficiente del monomio y considera validar el parámetro del exponente.
    </td>
  </tr>
  <tr>
    <td>poly_agregar</td>
    <td>1.0 / 2.5</td>
    <td>
      <strong>Funcionalidad:</strong> La lógica para insertar o actualizar un monomio es confusa e incorrecta. Se realizan asignaciones incorrectas (por ejemplo, asignar la suma a un puntero) y no se maneja la eliminación de nodos con coeficiente cero de forma consistente. <br>
      <strong>Mantenimiento:</strong> El uso de múltiples condicionales anidados sin funciones auxiliares complica la tarea de modificar o entender el código en el futuro. <br>
      <strong>Claridad:</strong> La estructura del código es difícil de seguir, con variables y condiciones que se repiten y confunden la intención original. <br>
      <strong>Eficiencia:</strong> Se recorre la lista de forma redundante, lo que puede ser ineficiente en casos de polinomios grandes. <br>
      <em>Sugerencia:</em> Descompón la función en subrutinas para la búsqueda, inserción y eliminación, y asegúrate de actualizar correctamente los nodos existentes.
    </td>
  </tr>
  <tr>
    <td>poly_imprimir</td>
    <td>0.5 / 1.25</td>
    <td>
      <strong>Funcionalidad:</strong> Se presentan errores tipográficos (por ejemplo, usar <code>prinf</code> en lugar de <code>printf</code>) y se utilizan nombres de campos (como <code>sig</code>, <code>coef</code> y <code>exp</code>) que no coinciden con la definición original, lo que impide la correcta impresión del polinomio. <br>
      <strong>Mantenimiento:</strong> La inconsistencia en el uso de nombres de variables y estructuras puede dificultar futuras modificaciones o depuraciones. <br>
      <strong>Claridad:</strong> Los errores de nomenclatura y tipográficos afectan la legibilidad y el entendimiento del código. <br>
      <strong>Eficiencia:</strong> Aunque la iteración es lineal y adecuada, los errores presentes impiden que la función cumpla su propósito. <br>
      <em>Sugerencia:</em> Corrige los nombres de los campos según la estructura definida y revisa la ortografía de las funciones estándar.
    </td>
  </tr>
  <tr>
    <td>poly_destruir</td>
    <td>0.75 / 1.25</td>
    <td>
      <strong>Funcionalidad:</strong> La función intenta liberar la memoria de cada nodo, pero el manejo de punteros es incorrecto (por ejemplo, se empieza en <code>p->primero->sig</code> y se liberan nodos de forma errónea), lo que puede ocasionar fugas de memoria o accesos indebidos. <br>
      <strong>Mantenimiento:</strong> La lógica para recorrer y liberar los nodos está fragmentada, dificultando la identificación de posibles errores y la extensión de la función en el futuro. <br>
      <strong>Claridad:</strong> El uso de nombres ambiguos y la cadena de asignaciones en el bucle complican la lectura del código. <br>
      <strong>Eficiencia:</strong> El proceso iterativo es adecuado, pero debe revisarse para garantizar la completa liberación de todos los nodos sin redundancias. <br>
      <em>Sugerencia:</em> Recorre la lista utilizando un ciclo claro y libera cada nodo de forma secuencial, asegurándote de actualizar correctamente los punteros a NULL.
    </td>
  </tr>
  <tr>
    <td>poly_sumar</td>
    <td>1.0 / 2</td>
    <td>
      <strong>Funcionalidad:</strong> La función está incompleta y se limita a comparar coeficientes de los primeros nodos, sin realizar realmente la suma de los polinomios. Además, se omiten comprobaciones críticas como validar que los punteros de entrada no sean NULL. <br>
      <strong>Mantenimiento:</strong> La falta de implementación completa dificulta la extensión y corrección de la función. <br>
      <strong>Claridad:</strong> El código resulta confuso por la comparación inadecuada y la ausencia de una lógica que combine ambos polinomios. <br>
      <strong>Eficiencia:</strong> Al no implementar la suma correcta, no se puede evaluar la eficiencia en la combinación de nodos. <br>
      <em>Sugerencia:</em> Implementa la suma de los monomios de ambos polinomios de forma simultánea, teniendo en cuenta la suma de coeficientes para monomios con el mismo exponente, y valida adecuadamente las entradas.
    </td>
  </tr>
</table>
</body>
</html>
./pruebas//Zacarías Rusty_assignsubmission_file_/:compila correctamente<br>
<html>
  <body>
    <p>Calificación final: 7/10<br></p>
    <table border="1">
      <tr>
        <th>Método</th>
        <th>Puntuación</th>
        <th>Retroalimentación</th>
      </tr>
      <tr>
        <td>poly_crear</td>
        <td>0.5 / 1</td>
        <td>
          <strong>Funcionalidad:</strong> La función reserva e inicializa la estructura correctamente, pero se requiere que en caso de fallo se finalice con código -1; se usa exit(1) en lugar de exit(-1).<br>
          <strong>Mantenimiento:</strong> El código es corto y directo, sin duplicación, pero se podría enriquecer con un mensaje de error más claro y consistente.<br>
          <strong>Claridad:</strong> Los nombres usados son descriptivos; sin embargo, se recomienda renombrar el parámetro a algo más intuitivo (por ejemplo, "polinomio") para mayor comprensión.<br>
          <strong>Eficiencia:</strong> No presenta bucles o condiciones complejas; la implementación es eficiente para el propósito.<br>
          <em>Sugerencia Formativa:</em> Ajustar el código de salida a exit(-1) y mejorar el mensaje de error para lograr especificaciones exactas.
        </td>
      </tr>
      <tr>
        <td>poly_grado</td>
        <td>1 / 1</td>
        <td>
          <strong>Funcionalidad:</strong> Calcula el grado consultando el último monomio, devolviendo -1 si el polinomio es NULL o vacío.<br>
          <strong>Mantenimiento:</strong> El código es simple y permite futuras modificaciones sin complicaciones.<br>
          <strong>Claridad:</strong> La variable "res" es clara y la lógica es lineal. Se recomienda, si se repite la comprobación de polinomio no nulo en otros métodos, considerar una función auxiliar.<br>
          <strong>Eficiencia:</strong> La implementación es de O(1) y responde eficientemente al requerimiento.<br>
          <em>Sugerencia Formativa:</em> Aunque es correcto, modularizar verificaciones comunes podría facilitar el mantenimiento a futuro.
        </td>
      </tr>
      <tr>
        <td>poly_coeficiente</td>
        <td>1 / 1</td>
        <td>
          <strong>Funcionalidad:</strong> La función recorre los monomios hasta el exponente indicado y devuelve correctamente el coeficiente o 0 si no se encuentra; se verifica que el exponente sea no negativo.<br>
          <strong>Mantenimiento:</strong> El uso de un bucle simple y comprobaciones claras facilita la extensión del método.<br>
          <strong>Claridad:</strong> Los nombres de variables son descriptivos y la estructura del loop es comprensible.<br>
          <strong>Eficiencia:</strong> Se evita recorrer de más gracias a la condición en el while, aunque se asume que la lista está ordenada.<br>
          <em>Sugerencia Formativa:</em> Considera documentar de forma breve el supuesto de orden en la lista para aumentar la claridad.
        </td>
      </tr>
      <tr>
        <td>poly_agregar</td>
        <td>1.0 / 2.5</td>
        <td>
          <strong>Funcionalidad:</strong> La función intenta insertar o actualizar un monomio existente en la lista. Sin embargo, si se intenta actualizar el primer elemento (cuando no se entra al loop) se utiliza una variable "previo" no inicializada, lo que puede causar errores en la suma y eliminación del nodo. Además, se usa exit(1) en vez de exit(-1) en caso de fallo en malloc. <br>
          <strong>Mantenimiento:</strong> Aunque se ha extraído la suma en la función auxiliar "sumarMonomiosF", la complejidad de manejar punteros a punteros y la falta de separación de casos (inicio, medio y final) dificultan su mantenimiento.<br>
          <strong>Claridad:</strong> El uso de variables como "aux" y "previo" puede resultar confuso, especialmente cuando "previo" no está inicializado en el caso de inserción al inicio.<br>
          <strong>Eficiencia:</strong> El algoritmo es adecuado en términos de eficiencia, utilizando un solo recorrido para encontrar la posición de inserción.<br>
          <em>Sugerencia Formativa:</em> Revisa el manejo del caso en que la operación se realiza sobre el primer nodo; inicializa correctamente la variable "previo" o trata ese caso por separado. Además, cumple estrictamente con el protocolo de salida para fallos en la asignación de memoria.
        </td>
      </tr>
      <tr>
        <td>poly_imprimir</td>
        <td>1.25 / 1.25</td>
        <td>
          <strong>Funcionalidad:</strong> Imprime los monomios en un formato legible y maneja correctamente el caso en que el polinomio es NULL.<br>
          <strong>Mantenimiento:</strong> El método es breve y no contiene duplicación de código; la función auxiliar "imprimirMonomio" ayuda a mantener bien organizado el código.<br>
          <strong>Claridad:</strong> El código resulta fácil de leer y se entiende la intención de cada parte.<br>
          <strong>Eficiencia:</strong> Utiliza un bucle simple y es eficiente en su propósito.<br>
          <em>Sugerencia Formativa:</em> La implementación es correcta; se podría agregar un comentario adicional explicativo en la llamada final a printf para separar salidas.
        </td>
      </tr>
      <tr>
        <td>poly_destruir</td>
        <td>1.25 / 1.25</td>
        <td>
          <strong>Funcionalidad:</strong> Libera adecuadamente todos los nodos y reinicializa los punteros del polinomio, evitando fugas de memoria.<br>
          <strong>Mantenimiento:</strong> El uso de dos punteros para recorrer y liberar la lista permite que el código sea extendido y modificado fácilmente.<br>
          <strong>Claridad:</strong> Las variables "head" y "aux" permiten seguir la lógica de liberación de memoria sin dificultad.<br>
          <strong>Eficiencia:</strong> La estrategia de liberar nodos en un solo recorrido es eficiente.<br>
          <em>Sugerencia Formativa:</em> Considera agregar comentarios sobre la importancia de reinicializar los punteros para reutilizar la estructura.
        </td>
      </tr>
      <tr>
        <td>poly_sumar</td>
        <td>1.0 / 2</td>
        <td>
          <strong>Funcionalidad:</strong> La función suma dos polinomios creando una nueva estructura e insertando los monomios de cada uno mediante poly_agregar. Sin embargo, al depender de poly_agregar, hereda el problema con la actualización de monomios en el primer nodo, lo que puede afectar la correcta suma cuando existen monomios con el mismo exponente.<br>
          <strong>Mantenimiento:</strong> La estrategia de sumar dos listas por separado es comprensible, pero integrar la suma de monomios coincidentes en un solo recorrido podría simplificar la lógica y el mantenimiento.<br>
          <strong>Claridad:</strong> El uso de ciclos separados para cada polinomio es claro, pero se recomienda verificar la validez de los punteros de entrada de forma independiente para mayor robustez.<br>
          <strong>Eficiencia:</strong> El método resulta en dos recorridos completos, lo cual es aceptable, aunque se podría optimizar fusionando ambos recorridos cuando las listas estén ordenadas.<br>
          <em>Sugerencia Formativa:</em> Asegúrate de manejar correctamente los casos extremos y considera refactorizar para evitar duplicación de código y aprovechar la ordenación inherente de los polinomios.
        </td>
      </tr>
    </table>
  </body>
</html>