./pruebas//Senador Rebeca_assignsubmission_file_/:Compila correctamente. <br>
<html>
  <body>
    3/10<br>
    <table border="1">
      <tr>
        <th>Método</th>
        <th>Puntuación</th>
        <th>Retroalimentación</th>
      </tr>
      <tr>
        <td>insert(K key)</td>
        <td>0/1</td>
        <td>
          <b>Funcionalidad:</b> La lógica implementada para insertar un elemento es defectuosa. Se arroja una excepción si el árbol está vacío en lugar de insertar el primer nodo, lo que impide que el árbol acepte el primer elemento. Además, la manipulación del nodo mediante un bucle con variable 'pass' no se ejecuta porque la condición nunca se cumple.<br>
          <b>Eficiencia:</b> El uso de un bucle innecesario y la invocación de splay sobre un nodo auxiliar generan complejidad extra sin aportar claridad.<br>
          <b>Calidad del código auxiliar:</b> El método se apoya en otros métodos (splay, zigRight, zigLeft) pero la forma en que se invocan no respeta la semántica requerida para la inserción en un árbol Splay.<br>
          <b>Claridad:</b> La utilización de variables como 'aux' y 'pass' es confusa, y la intención del bucle es difícil de seguir.<br>
          <b>Buenas prácticas locales:</b> Se debería controlar adecuadamente el caso de árbol vacío y evitar bucles cuya condición nunca se cumple.<br>
          <b>Cobertura de casos límite y gestión de excepciones:</b> El método lanza excepciones apropiadas al recibir null, pero falla en cubrir el caso del árbol vacío para la inserción.
        </td>
      </tr>
      <tr>
        <td>search(K key)</td>
        <td>0/1.5</td>
        <td>
          <b>Funcionalidad:</b> La búsqueda falla debido a la creación incorrecta de un nuevo nodo usando el nodo raíz (se pasa un nodo en lugar de una clave) y a la dependencia del método copyOf, que no está implementado. Esto impide que se realice una búsqueda válida.<br>
          <b>Eficiencia:</b> La creación de una copia completa del árbol para propósitos de búsqueda es ineficiente.<br>
          <b>Calidad del código auxiliar:</b> Se usa splay, pero la forma de invocarlo y la manipulación del nodo son incorrectas.<br>
          <b>Claridad:</b> El código es poco claro en cuanto al manejo del nodo auxiliar y la dependencia de copyOf sin implementación.<br>
          <b>Buenas prácticas locales:</b> Se debe evitar depender de métodos no implementados y manejar adecuadamente el árbol vacío.<br>
          <b>Cobertura de casos límite y gestión de excepciones:</b> Se verifica el parámetro null, pero no se gestiona el posible árbol vacío.
        </td>
      </tr>
      <tr>
        <td>delete(K key)</td>
        <td>0/1</td>
        <td>
          <b>Funcionalidad:</b> El método no ha sido implementado y lanza una excepción de operación no soportada.<br>
          <b>Claridad:</b> La intención de implementar la eliminación queda relegada a futuro, lo cual impide el correcto funcionamiento del árbol.<br>
          <b>Buenas prácticas locales:</b> Se debería implementar una combinación de splay y ajuste del árbol para eliminar el nodo, en lugar de dejar un método sin funcionalidad.
        </td>
      </tr>
      <tr>
        <td>clear()</td>
        <td>1/1</td>
        <td>
          <b>Funcionalidad:</b> Correcta, establece la raíz a null y el tamaño a cero, vaciando el árbol.<br>
          <b>Claridad:</b> El código es sencillo y directo.<br>
          <b>Mantenimiento:</b> Fácil de leer y mantener.
        </td>
      </tr>
      <tr>
        <td>deleteMinimum()</td>
        <td>0/0.5</td>
        <td>
          <b>Funcionalidad:</b> La eliminación del mínimo falla, ya que se crea un nodo auxiliar y se anula la raíz sin buscar ni conservar el subárbol derecho o izquierdo de forma correcta. Tampoco se utiliza el método minimum existente.<br>
          <b>Claridad:</b> La intención de splay sobre aux.left es confusa y no se logra la eliminación correcta.<br>
          <b>Buenas prácticas locales:</b> Se debe reutilizar el método minimum para localizar el nodo y luego eliminarlo usando el método delete.
        </td>
      </tr>
      <tr>
        <td>zigzigRight(Node&lt;K&gt; node)</td>
        <td>1/1</td>
        <td>
          <b>Funcionalidad:</b> Realiza la doble rotación a la derecha según lo solicitado, utilizando zigRight de forma consecutiva cuando procede.<br>
          <b>Claridad:</b> Aunque los nombres de variables pueden resultar un poco genéricos, la lógica es comprensible.<br>
          <b>Eficiencia:</b> La operación es de complejidad O(1), lo cual es adecuado.
        </td>
      </tr>
      <tr>
        <td>zigzigLeft(Node&lt;K&gt; node)</td>
        <td>1/1</td>
        <td>
          <b>Funcionalidad:</b> La doble rotación a la izquierda se implementa correctamente.<br>
          <b>Claridad:</b> El proceso es claro pese a que se podrían usar nombres de variables más descriptivos.<br>
          <b>Eficiencia:</b> Ejecuta en tiempo constante, cumpliendo el requerimiento.
        </td>
      </tr>
      <tr>
        <td>zigzagRightLeft(Node&lt;K&gt; node)</td>
        <td>0/1</td>
        <td>
          <b>Funcionalidad:</b> La implementación no maneja correctamente el requerimiento de no realizar la primera rotación si no existe el subárbol en la rama izquierda del hijo derecho. La manipulación de variables (asignar node2=node) y el posterior zigLeft se realizan de forma incorrecta.<br>
          <b>Claridad:</b> La lógica es confusa por el reuso inapropiado de las variables, lo que dificulta su comprensión.<br>
          <b>Buenas prácticas locales:</b> Se recomienda reestructurar la lógica en métodos privados auxiliares para separar y clarificar las condiciones.
        </td>
      </tr>
      <tr>
        <td>zigzagLeftRight(Node&lt;K&gt; node)</td>
        <td>0/1</td>
        <td>
          <b>Funcionalidad:</b> Similar al método anterior, la doble rotación izquierda-derecha no verifica correctamente la existencia del subárbol en la rama derecha del hijo izquierdo, lo que causa una aplicación inadecuada de las rotaciones.<br>
          <b>Claridad:</b> El reuso de variables y la falta de comentarios explicativos hacen que el código sea difícil de entender.<br>
          <b>Buenas prácticas locales:</b> Se aconseja dividir la lógica en pasos y validar cada condición de manera independiente.
        </td>
      </tr>
      <tr>
        <td>copyOf(SearchTree&lt;K&gt; that)</td>
        <td>0/0.5</td>
        <td>
          <b>Funcionalidad:</b> El método no se ha implementado, por lo que no cumple con el requisito de copiar los datos conservando la estructura.<br>
          <b>Claridad:</b> La firma del método es correcta, pero la excepción lanzada indica que falta la implementación.<br>
          <b>Buenas prácticas locales:</b> Es importante implementar la copia de estructura para cumplir con los requerimientos funcionales.
        </td>
      </tr>
      <tr>
        <td>copyOf(SplayTree&lt;K&gt; that)</td>
        <td>0/0.5</td>
        <td>
          <b>Funcionalidad:</b> Al igual que el método anterior, este método arroja una excepción en lugar de realizar la copia preservando la estructura.<br>
          <b>Claridad:</b> Aunque la intención es clara, la falta de implementación penaliza el cumplimiento de los requisitos.<br>
          <b>Buenas prácticas locales:</b> Se debería implementar la copia completa y fiel de la estructura del árbol.
        </td>
      </tr>
    </table>
  </body>
</html>
./pruebas//Zacarías Rusty_assignsubmission_file_/:Compila correctamente. <br>
<html>
  <body>
    <p>7/10<br></p>
    <table border="1">
      <tr>
        <th>Método</th>
        <th>Puntuación</th>
        <th>Feedback</th>
      </tr>
      <tr>
        <td>insert(K key)</td>
        <td>0.7/1</td>
        <td>
          <strong>Funcionalidad:</strong> Se verifica que la clave no sea nula y se contempla el caso de árbol vacío. 
          Sin embargo, la solución recurre a una inserción recursiva junto con varias invocaciones a splay; esto no es la aproximación tradicional en árboles splay y puede afectar la eficiencia y claridad. 
          <br>
          <strong>Buenas prácticas auxiliares:</strong> Podría haberse descompuesto la lógica en métodos más específicos para evitar duplicación y recursividad excesiva. 
          <br>
          <strong>Sugerencia formativa:</strong> Considera reestructurar la inserción de forma que primero se haga un splay en la raíz, y luego se inserte el nuevo nodo o se reemplace la clave sin recurrir a llamadas recursivas innecesarias.
        </td>
      </tr>
      <tr>
        <td>search(K key)</td>
        <td>1/1.5</td>
        <td>
          <strong>Funcionalidad:</strong> El método comprueba que la clave no sea nula y, tras aplicar splay, devuelve la clave si coincide. 
          Sin embargo, lanza una excepción cuando el árbol está vacío, a diferencia de lo especificado (se espera que devuelva null si no se encuentra). 
          <br>
          <strong>Sugerencia formativa:</strong> Asegúrate de que la búsqueda en un árbol vacío devuelva null, reservando las excepciones solo para parámetros nulos.
        </td>
      </tr>
      <tr>
        <td>delete(K key)</td>
        <td>0.5/1</td>
        <td>
          <strong>Funcionalidad:</strong> Se hace splay con la clave indicada y se invoca un método auxiliar para eliminar la raíz en caso de coincidencia. 
          No obstante, si la clave no existe, aun se decrementa el contador de elementos, y la fusión de subárboles en el caso de tener ambos hijos no es la más directa. 
          <br>
          <strong>Sugerencia formativa:</strong> Revisa la condición de borrado para que la estructura no se modifique (por ejemplo, decrementando <em>size</em>) cuando no se ha encontrado la clave.
        </td>
      </tr>
      <tr>
        <td>clear()</td>
        <td>1/1</td>
        <td>
          <strong>Funcionalidad:</strong> La función limpia correctamente el árbol al asignar la raíz a null y reiniciar el contador. 
          <br>
          <strong>Sugerencia formativa:</strong> Buen trabajo; este método es claro y cumple con los requisitos.
        </td>
      </tr>
      <tr>
        <td>deleteMinimum()</td>
        <td>0.5/0.5</td>
        <td>
          <strong>Funcionalidad:</strong> El método localiza el mínimo mediante el método minimum() y aplica splay para posicionarlo, eliminándolo luego. 
          Se nota omisión en la actualización del contador <em>size</em>, aunque la lógica principal cumple los requisitos.
          <br>
          <strong>Sugerencia formativa:</strong> Considera actualizar el tamaño del árbol para mantener la coherencia interna.
        </td>
      </tr>
      <tr>
        <td>zigzigRight(Node&lt;K&gt; node)</td>
        <td>1/1</td>
        <td>
          <strong>Funcionalidad:</strong> El método realiza la doble rotación a derecha según lo especificado: tras la primera rotación, solo realiza la segunda si el hijo izquierdo está presente.
          <br>
          <strong>Claridad:</strong> Aunque cumple, el uso de variables intermedias podría mejorar la trazabilidad del proceso.
          <br>
          <strong>Sugerencia formativa:</strong> Agrega comentarios para clarificar cada paso de la rotación.
        </td>
      </tr>
      <tr>
        <td>zigzigLeft(Node&lt;K&gt; node)</td>
        <td>1/1</td>
        <td>
          <strong>Funcionalidad:</strong> Implementa correctamente la doble rotación a izquierda.
          <br>
          <strong>Sugerencia formativa:</strong> Al igual que en zigzigRight, una mayor claridad en la asignación de variables y comentarios serían útiles para el mantenimiento.
        </td>
      </tr>
      <tr>
        <td>zigzagRightLeft(Node&lt;K&gt; node)</td>
        <td>1/1</td>
        <td>
          <strong>Funcionalidad:</strong> El método verifica correctamente la existencia del subárbol en la rama izquierda del hijo derecho y aplica la rotación apropiada antes de la rotación final.
          <br>
          <strong>Sugerencia formativa:</strong> La lógica es adecuada; se recomienda documentar condiciones de borde para mantener el código entendible.
        </td>
      </tr>
      <tr>
        <td>zigzagLeftRight(Node&lt;K&gt; node)</td>
        <td>1/1</td>
        <td>
          <strong>Funcionalidad:</strong> Realiza la doble rotación izquierda-derecha de acuerdo con el requisito, comprobando que existe el subárbol en la rama derecha del hijo izquierdo.
          <br>
          <strong>Sugerencia formativa:</strong> Buena implementación, aunque añadir comentarios podría facilitar la comprensión a futuros mantenedores.
        </td>
      </tr>
      <tr>
        <td>copyOf(SearchTree&lt;K&gt; that)</td>
        <td>0.5/0.5</td>
        <td>
          <strong>Funcionalidad:</strong> El método realiza una copia de los datos del árbol fuente utilizando un recorrido inOrder e insertándolos en un nuevo árbol. 
          Se ajusta al requisito de copiar datos, sin preocuparse por la estructura.
          <br>
          <strong>Sugerencia formativa:</strong> Buen uso de métodos existentes para reconstruir el árbol; sin embargo, ten presente las implicaciones en el costo de múltiples inserciones.
        </td>
      </tr>
      <tr>
        <td>copyOf(SplayTree&lt;K&gt; that)</td>
        <td>0.25/0.5</td>
        <td>
          <strong>Funcionalidad:</strong> Se copia recursivamente la estructura del árbol, preservando la forma original. 
          No obstante, el contador <em>size</em> no se actualiza en el árbol copia, lo que puede derivar en inconsistencias en métodos que dependen de él.
          <br>
          <strong>Sugerencia formativa:</strong> Después de copiar la estructura, asegúrate de ajustar el campo <em>size</em> (por ejemplo, realizando un recorrido o copiándolo si está disponible) para mantener la coherencia interna.
        </td>
      </tr>
    </table>
  </body>
</html>